
us.the.mac.library.demo.androidjni.MainIntentService

********************************************************************************

us.the.mac.library.demo.androidjni.MainIntentService.jni was generated as a helper for MainIntentService.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: us.the.mac.library.demo.androidjni.MainIntentService, onCreate, onHandleIntent, showToast

The source code can be copied into the respective MainIntentService.h and
MainIntentService.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class MainIntentService : public JavaClass {
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the MainIntentService class defined in Java.
    */
    const char *getCanonicalName() const { return CANONICAL_CLASS_NAME; }

    MainIntentService();

    MainIntentService(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    void onCreate(JNIEnv *env);

    void onHandleIntent(JNIEnv *env, jobject jobjectValue1);

    void showToast(JNIEnv *env, jstring jstringValue1);

    static const char * const CANONICAL_CLASS_NAME;
};

********************************************************************************

const char * const MainIntentService::CANONICAL_CLASS_NAME = "us/the/mac/library/demo/androidjni/MainIntentService";

MainIntentService::MainIntentService() : JavaClass() {}

/**
* Here you can construct the MainIntentService object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
MainIntentService::MainIntentService(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "MainIntentService's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void MainIntentService::initialize(JNIEnv *env)
{
    bool debug = ENABLE_LOGGING_DEBUG;
    if(debug) LOG_INFO("Called %s.initialize", getCanonicalName());

    setClass(env);
    cacheConstructor(env);

    cacheSignature(env, "onCreate", "()V");
    cacheSignature(env, "onHandleIntent", "(Landroid/content/Intent;)V");
    cacheSignature(env, "showToast", "(Ljava/lang/String;)V");

    registerNativeMethods(env);
}

void MainIntentService::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

void MainIntentService::onCreate(JNIEnv *env)
{
    env->CallVoidMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
}

void MainIntentService::onHandleIntent(JNIEnv *env, jobject jobjectValue1)
{
    env->CallVoidMethod(thisObj, getMethod(__FUNCTION__), jobjectValue1);
    JavaExceptionUtils::checkException(env);
}

void MainIntentService::showToast(JNIEnv *env, jstring jstringValue1)
{
    env->CallVoidMethod(thisObj, getMethod(__FUNCTION__), jstringValue1);
    JavaExceptionUtils::checkException(env);
}


********************************************************************************

instance.onCreate(env);

instance.onHandleIntent(env, jobjectValue1);

instance.showToast(env, jstringValue1);


********************************************************************************


